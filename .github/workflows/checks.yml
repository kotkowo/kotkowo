name: Elixir CI

on:
  workflow_call:
    inputs:
      elixir:
        required: true
        type: string
      otp:
        required: true
        type: string

env:
  MIX_ENV: test

concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  deps:
    name: Dependencies
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{inputs.otp}}
          elixir-version: ${{inputs.elixir}}

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-${{ inputs.otp }}-${{ inputs.elixir }}-${{ hashFiles('mix.lock') }}

      - name: Install Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Compile
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix deps.compile
          mix dialyzer --plt

      - name: Check Unused Dependencies
        run: |
          mix deps.unlock --check-unused

      - name: Audit Dependencies
        run: |
          mix hex.audit

  check_db:
    name: Migrations
    runs-on: ubuntu-latest
    needs: deps
    services:
      db:
        image: postgres:latest
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: academy
          POSTGRES_USER: academy
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      MIX_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{inputs.otp}}
          elixir-version: ${{inputs.elixir}}

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-${{ inputs.otp }}-${{ inputs.elixir }}-${{ hashFiles('mix.lock') }}

      - name: Reset database
        run: |
          mix ecto.reset
      - name: Check tenant migrations
        run: |
          mix ecto.reset && mix ecto.create && mix triplex.migrate && mix triplex.rollback --all
      - name: Check migrations
        run: |
          mix ecto.create && mix triplex.rollback --all && mix ecto.migrate && mix ecto.rollback --all

  static_code_analysis:
    name: Static Code Analysis
    needs: deps
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{inputs.otp}}
          elixir-version: ${{inputs.elixir}}

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-${{ inputs.otp }}-${{ inputs.elixir }}-${{ hashFiles('mix.lock') }}

      - name: Check Code Format
        run: mix format --check-formatted

      - name: Run Credo
        run: mix credo

      - name: Run Sobelow
        run: mix sobelow --config

      - name: Check compile warnings
        run: mix compile --warnings-as-errors

      - name: Run Dialyzer
        env:
          MIX_ENV: test
        run: mix dialyzer --format github --no-check

      - name: Check gettext
        run: mix gettext.extract --check-up-to-date

  unit_tests:
    name: Unit Tests
    needs: deps
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:latest
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: academy
          POSTGRES_USER: academy
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      MIX_ENV: test
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{inputs.otp}}
          elixir-version: ${{inputs.elixir}}

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-${{ inputs.otp }}-${{ inputs.elixir }}-${{ hashFiles('mix.lock') }}

      - name: Reset db
        run: mix ecto.reset

      - name: Run Tests
        run: mix test

      - name: Test coverage
        run: mix test --cover

  seeds_check:
    name: Check seeds
    needs: deps
    services:
      db:
        image: postgres:latest
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: academy
          POSTGRES_USER: academy
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{inputs.otp}}
          elixir-version: ${{inputs.elixir}}

      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-${{ inputs.otp }}-${{ inputs.elixir }}-${{ hashFiles('mix.lock') }}

      - name: Reset db
        run: |
          mix ecto.drop
          mix ecto.setup
      - name: Run seeds
        run: mix drill -r Academy.Repo

  eslint:
    name: "ESLint check"
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: node-cache
        with:
          path: |
            assets/node_modules
          key: ${{ runner.os }}-${{ hashFiles('assets/package-lock.json') }}
      - uses: actions/checkout@v3
      - name: Install modules
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        working-directory: ./assets
        run: npm install
      - name: Run ESLint
        working-directory: ./assets
        run: npx eslint .
